// Generated by Dagger (https://dagger.dev).
package com.nitv.newsapp.di;

import com.nitv.newsapp.data.local.NewsDao;
import com.nitv.newsapp.network.api.ApiHelper;
import com.nitv.newsapp.network.repository.NewsRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideRepositoryFactory implements Factory<NewsRepository> {
  private final Provider<ApiHelper> remoteDataSourceProvider;

  private final Provider<NewsDao> localDataSourceProvider;

  public RepositoryModule_ProvideRepositoryFactory(Provider<ApiHelper> remoteDataSourceProvider,
      Provider<NewsDao> localDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public NewsRepository get() {
    return provideRepository(remoteDataSourceProvider.get(), localDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideRepositoryFactory create(
      Provider<ApiHelper> remoteDataSourceProvider, Provider<NewsDao> localDataSourceProvider) {
    return new RepositoryModule_ProvideRepositoryFactory(remoteDataSourceProvider, localDataSourceProvider);
  }

  public static NewsRepository provideRepository(ApiHelper remoteDataSource,
      NewsDao localDataSource) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideRepository(remoteDataSource, localDataSource));
  }
}
